#!/usr/bin/env python

"""
Command-line interface for bugzilla2gitlab.
"""

import sys
import argparse
import concurrent.futures
from bugzilla2gitlab import Migrator

def chunks(seq, size):
    # split into X chunks for 10 workers
    # should match amount of workers
    return (seq[i::size] for i in range(size))

def main():
    parser = argparse.ArgumentParser(description='Migrate bugs from Bugzilla to GitLab Issues.')
    parser.add_argument('bug_list', metavar="BUGLIST",
                        help="A file containing a list of Bugzilla bug numbers to migrate,"
                        " one per line.")
    parser.add_argument("conf_dir", metavar='CONFIG_DIRECTORY',
                        help="The directory containing the required configuration files.")
    args = parser.parse_args()

    with open(args.bug_list, "r") as f:
        bugs = f.read().splitlines()

    client = Migrator(config_path=args.conf_dir)
    with concurrent.futures.ProcessPoolExecutor(
        max_workers=10
    ) as  executor:
        fut = {executor.submit(client.migrate, b): b for b in chunks(bugs,10)}
        for res in concurrent.futures.as_completed(fut):
            try:
                # no result returned, so simply tell
                # if worker is done..
                pid = res.result()
                print("SUCCESS: Worker with pid {} exited success".format(pid))
            except Exception as e:
                print("FATAL: Worker with exited with error: {}".format(e))
                raise

if __name__ == "__main__":
    main()
